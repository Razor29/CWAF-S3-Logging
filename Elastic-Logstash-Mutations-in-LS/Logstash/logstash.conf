input {
  s3 {
    access_key_id => '' # Enter AWS Access ID with the required permissions
    secret_access_key => '' # Enter AWS Secret Access Key with the required permissions
    region => '' # Enter the AWS region where the S3 is location for example us-east-1
    bucket => "" # Enter the name of the AWS S3 bucket where the logs are located
    codec => "json_lines" 
    prefix => "/" #enter the name of the directory where the processed ndjson logs are saved
    type => "cwaf-logs"
    interval => 300 # Fetch interval in seconds (5 minutes)
  }
}

filter {
  mutate {
    add_field => {
      "file" => "%{[@metadata][s3][key]}"
    }
  }

  # Use Ruby to extract last folder and set the event type
  ruby {
    code => "
      s3_key = event.get('file')
      last_folder = File.dirname(s3_key).split('/').last
      event_type = case last_folder
      when 'WAF'
        'cwaf-waf-logs'
      when 'DDoS'
        'cwaf-ddos-logs'
      when 'Bot'
        'cwaf-bot-logs'
      when 'WebDDoS'
        'cwaf-webddos-logs'
      else
        'cwaf-logs'
      end
      event.set('type', event_type)
    "
  }

  if [type] == "cwaf-webddos-logs" {
    drop { } # TODO add web ddos log configuration.
  }


  if [type] == "cwaf-waf-logs" or [type] == "cwaf-ddos-logs" or [type] == "cwaf-bot-logs" {
  ruby {
    code => "
      s3_key = event.get('file')
      parts = File.dirname(s3_key).split('/')
      tenant_name = parts[-3]  # Two parent directories up

      filename = File.basename(s3_key, '.*')
      if filename.start_with?('rdwr_event_' + tenant_name + '_')
        components = filename['rdwr_event_'.length + tenant_name.length + 1..-1]
        date_index = components.index(/\d{8}H\d{6}_\d{8}H\d{6}/)
        if date_index
          app_name = components[0..date_index-2]
          event.set('tenant_name', tenant_name)
          event.set('application_name', app_name)
        end
      end
    "
    }
  }

  # Remove the file field
  mutate {
    remove_field => ["file"]
  }
  
  
  # ---------------------------------------------
  # Handle CWAAP Access Logs
  # ---------------------------------------------
  
  if [type] == "cwaf-logs" {
  
    # Handling Destination IP field  
    if [destination_ip] == "" or [destination_ip] == "-" {
    
      mutate {
        remove_field => ["destination_ip"]
      }
      
    } else {
      
      if [destination_ip] =~ /,/ {
        mutate {
          gsub => [
              "destination_ip", "\s", ""
          ]
    
          add_field => { "temp_destination_ip" => "%{destination_ip}" }
          remove_field => ["destination_ip"]
        
        }
        
  
  		  ruby {
    			code => "
            split_ip = event.get('temp_destination_ip').split(',')
            ip_regex = /^[0-9.]+$/
        		ips = split_ip.is_a?(Array) ? split_ip : [split_ip]
        		valid_ips, invalid_ips = ips.map(&:strip).partition { |ip| ip =~ ip_regex }
      
        		event.set('destination_ip', valid_ips)
        		if invalid_ips.any?
        		  event.set('[invalid_data][destination_ip]', invalid_ips.join(', '))
        		end
            event.remove('temp_destination_ip')
    			"
  		  }
      }
    }
  
  # Handling Source IP field
  
    if [source_ip] == "" or [source_ip] == "-" {
    
      mutate {
        remove_field => ["source_ip"]
      }
      
    } else {
      if [source_ip] =~ /,/ {
        mutate {
          gsub => [
              "source_ip", "\s", ""
          ]
    
          add_field => { "temp_source_ip" => "%{source_ip}" }
          remove_field => ["source_ip"]
          
          }
        
    
    		  ruby {
      			code => "
              split_ip = event.get('temp_source_ip').split(',')
              ip_regex = /^[0-9.]+$/
          		ips = split_ip.is_a?(Array) ? split_ip : [split_ip]
          		valid_ips, invalid_ips = ips.map(&:strip).partition { |ip| ip =~ ip_regex }
        
          		event.set('source_ip', valid_ips)
          		if invalid_ips.any?
          		  event.set('[invalid_data][source_ip]', invalid_ips.join(', '))
          		end
              event.remove('temp_source_ip')
      			"
    		  }
        } 
      }




  # Handling x-forwarded-for field
  
    if [x-forwarded-for] == "" or [x-forwarded-for] == "-" {
    
      mutate {
        remove_field => ["x-forwarded-for"]
      }
      
    } else {
      if [x-forwarded-for] =~ /,/ {
        mutate {
          gsub => [
              "x-forwarded-for", "\s", ""
          ]
    
          add_field => { "temp_x-forwarded-for" => "%{x-forwarded-for}" }
          remove_field => ["x-forwarded-for"]
          
          }
    
    		  ruby {
      			code => "
              split_ip = event.get('temp_x-forwarded-for').split(',')
              ip_regex = /^[0-9.]+$/
          		ips = split_ip.is_a?(Array) ? split_ip : [split_ip]
          		valid_ips, invalid_ips = ips.map(&:strip).partition { |ip| ip =~ ip_regex }
        
          		event.set('x-forwarded-for', valid_ips)
          		if invalid_ips.any?
          		  event.set('[invalid_data][x-forwarded-for]', invalid_ips.join(', '))
          		end
              event.remove('temp_x-forwarded-for')
      			"
    		  }
        }
      }


	  if [request] == "" or [request] == "-" or [request] == " - " {
  		mutate {
  		  remove_field => [ "request" ]
  		}
	  } else {
		grok {
      match => { "request" => "%{WORD:method} %{URIPATH:uri} HTTP/%{NUMBER:http_version}" }
  		}
  		mutate {
  		  remove_field => ["method", "http_version"]
  		}
	  }

	  if [referrer] == "-" {
  		mutate {
  		  remove_field => [ "referrer" ]
  		}
	  }

	  if [cookie] == "-" {
  		mutate {
  		  remove_field => [ "cookie" ]
  		}
	  }
     
     
	  if [country_code] == "--" or [country_code] == "-" or [country_code] == "" {
  		mutate {
  		  remove_field => [ "country_code" ]
  		}
	  }

	  date {
		match => ["time", "dd/MMM/yyyy:HH:mm:ss Z"]
		target => "@timestamp"
	  }
     
	}
    
    
  # ---------------------------------------------
  # Handle CWAAP WAAP Security Events
  # ---------------------------------------------
      
  if [type] == "cwaf-waf-logs" {
    # Convert epoch time to @timestamp
    date {
        match => ["receivedTimeStamp", "UNIX_MS"]
        target => "@timestamp"
    }
    ruby {
      code => "event.set('time', event.get('@timestamp').time.strftime('%d/%b/%Y:%H:%M:%S %z'))"
    }

    mutate {
      rename => { "destinationIp" => "destination_ip" }
      rename => { "destinationPort" => "destination_port" }
      rename => { "sourceIp" => "source_ip" }
      rename => { "sourcePort" => "source_port" }
    }
    
    # Handling Destination IP field
      if [destination_ip] {
  
        if [destination_ip] == "" or [destination_ip] == "-" {
    
          mutate {
            remove_field => ["destination_ip"]
          }
      
        } else {
        
          if [destination_ip] =~ /,/ {
            mutate {
            gsub => [
                "destination_ip", "\s", ""
            ]
      
            add_field => { "temp_destination_ip" => "%{destination_ip}" }
            remove_field => ["destination_ip"]
            
            }
  
      		  ruby {
        			code => "
                split_ip = event.get('temp_destination_ip').split(',')
                ip_regex = /^[0-9.]+$/
            		ips = split_ip.is_a?(Array) ? split_ip : [split_ip]
            		valid_ips, invalid_ips = ips.map(&:strip).partition { |ip| ip =~ ip_regex }
          
            		event.set('destination_ip', valid_ips)
            		if invalid_ips.any?
            		  event.set('[invalid_data][destination_ip]', invalid_ips.join(', '))
            		end
                event.remove('temp_destination_ip')
        			"
      		  }
          }
        }
      }
      
      # Handling source IP field
      if [source_ip] {
  
        if [source_ip] == "" or [source_ip] == "-" {
    
          mutate {
            remove_field => ["source_ip"]
          }
      
        } else {
          if [source_ip] =~ /,/ {
            mutate {
            gsub => [
                "source_ip", "\s", ""
            ]
      
            add_field => { "temp_source_ip" => "%{source_ip}" }
            remove_field => ["source_ip"]
            
          }
  
      		  ruby {
        			code => "
                split_ip = event.get('temp_source_ip').split(',')
                ip_regex = /^[0-9.]+$/
            		ips = split_ip.is_a?(Array) ? split_ip : [split_ip]
            		valid_ips, invalid_ips = ips.map(&:strip).partition { |ip| ip =~ ip_regex }
          
            		event.set('source_ip', valid_ips)
            		if invalid_ips.any?
            		  event.set('[invalid_data][source_ip]', invalid_ips.join(', '))
            		end
                event.remove('temp_source_ip')
        			"
      		  }
          }
        }
      }

    # Rename nested fields
    mutate {
      rename => { "[enrichmentContainer][geoLocation.countryCode]" => "country_code" }
      rename => { "[enrichmentContainer][applicationId]" => "application_id" }
      rename => { "[enrichmentContainer][owaspCategory2021]" => "owasp_category_2021" }
    }

    # Remove unnecessary fields
    mutate {
      remove_field => [ "webApp", "[enrichmentContainer][contractId]", "[enrichmentContainer][tenant]" ]
    }
  }

  # ---------------------------------------------
  # Handle CWAAP DDoS Security Events  
  # ---------------------------------------------

  if [type] == "cwaf-ddos-logs" {
  # Convert custom time format to @timestamp
  date {
    match => ["time", "dd-MM-yyyy HH:mm:ss"]
    target => "@timestamp"
  }

  # Convert @timestamp back to string format 'dd/MMM/yyyy:HH:mm:ss Z'
    ruby {
      code => "event.set('time', event.get('@timestamp').time.strftime('%d/%b/%Y:%H:%M:%S %z'))"
    }

    mutate {
      rename => { "destinationIP" => "destination_ip" }
      rename => { "destinationPort" => "destination_port" }
      rename => { "sourceIP" => "source_ip" }
      rename => { "sourcePort" => "source_port" }
    }
    
  # Handling source IP field
    if [source_ip] {

      if [source_ip] == "" or [source_ip] == "-" {
  
        mutate {
          remove_field => ["source_ip"]
        }
    
      } else {
        if [source_ip] =~ /,/ {
          mutate {
          gsub => [
              "source_ip", "\s", ""
          ]
    
          add_field => { "temp_source_ip" => "%{source_ip}" }
          remove_field => ["source_ip"]
          
        }
  
    		  ruby {
      			code => "
              split_ip = event.get('temp_source_ip').split(',')
              ip_regex = /^[0-9.]+$/
          		ips = split_ip.is_a?(Array) ? split_ip : [split_ip]
          		valid_ips, invalid_ips = ips.map(&:strip).partition { |ip| ip =~ ip_regex }
        
          		event.set('source_ip', valid_ips)
          		if invalid_ips.any?
          		  event.set('[invalid_data][source_ip]', invalid_ips.join(', '))
          		end
              event.remove('temp_source_ip')
      			"
    		  }
        }
      }
    }

  # Handling destination IP field
    if [destination_ip] {

      if [destination_ip] == "" or [destination_ip] == "-" {
  
        mutate {
          remove_field => ["destination_ip"]
        }
    
      } else {
        if [destination_ip] =~ /,/ {
          mutate {
          gsub => [
              "destination_ip", "\s", ""
          ]
    
          add_field => { "temp_destination_ip" => "%{destination_ip}" }
          remove_field => ["destination_ip"]
          
          }
  
    		  ruby {
      			code => "
              split_ip = event.get('temp_destination_ip').split(',')
              ip_regex = /^[0-9.]+$/
          		ips = split_ip.is_a?(Array) ? split_ip : [split_ip]
          		valid_ips, invalid_ips = ips.map(&:strip).partition { |ip| ip =~ ip_regex }
        
          		event.set('destination_ip', valid_ips)
          		if invalid_ips.any?
          		  event.set('[invalid_data][destination_ip]', invalid_ips.join(', '))
          		end
              event.remove('temp_destination_ip')
      			"
    		  }
        }
      }
    }

    # Rename nested fields
    mutate {
      rename => { "[enrichmentContainer][applicationId]" => "application_id" }
      rename => { "[country]" => "country_code" }  # Assuming 'country' is at the root level of the document
    }

    # Remove unnecessary fields
    mutate {
      remove_field => [ "[enrichmentContainer][contractId]", "[enrichmentContainer][tenant]", "[enrichmentContainer][geoLocation.countryCode]" ]
    }
  }
  
  # ---------------------------------------------
  # Handle CWAAP Bot Manager Security Events  
  # ---------------------------------------------
  
  if [type] == "cwaf-bot-logs" {
    # Convert epoch millisecond time to @timestamp
    date {
      match => ["time", "UNIX_MS"]
      target => "@timestamp"
    }

  # Convert @timestamp back to string format 'dd/MMM/yyyy:HH:mm:ss Z'
    ruby {
      code => "event.set('time', event.get('@timestamp').time.strftime('%d/%b/%Y:%H:%M:%S %z'))"
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "%{type}-%{+YYYY.MM.dd}"
    # user and password for Elasticsearch if needed
  }
}
